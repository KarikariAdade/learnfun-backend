// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  STUDENT
  EDUCATOR
}

enum AccountAuthType {
  DIRECT
  GOOGLE
  FACEBOOK
}

enum QuestionTypes {
  MULTIPLE_CHOICE
  ESSAY
  TRUE_FALSE
}

enum MessageTypes {
  TEXT
  FILE
  IMAGE
  VIDEO
}

enum MediaTypes {
  IMAGE
  VIDEO
  AUDIO
}

model Users {
  id                Int                 @id @default(autoincrement())
  uuid              String              @default(uuid())
  name              String
  email             String              @unique
  phone             String?             @unique
  password          String
  role              Roles
  is_verified Boolean @default(false)
  verification_expiry DateTime?
  account_auth_type AccountAuthType     @default(DIRECT)
  PasswordResets    Password_Resets[]
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  Courses           Courses[]
  Exams             Exams[]
  ExamSubmissions   ExamSubmissions[]
  ExamResults       ExamResults[]
  ChatParticipants  ChatParticipants[]
  ChatMessages      ChatMessages[]
  MessageReadStatus MessageReadStatus[]
  Posts             Posts[]
  Likes             Likes[]
  Comments          Comments[]
}

model Password_Resets {
  id         Int       @id @default(autoincrement())
  user_id    Int
  otp        String
  is_used    Boolean   @default(false)
  expiration DateTime?
  token      String    @default(uuid())
  created_at DateTime  @default(now())
  belongsTo  Users     @relation(fields: [user_id], references: [id])
  updated_at DateTime  @default(now())
}

model Past_Questions {
  id         Int      @id @default(autoincrement())
  subject    String
  year       Int?     @db.Year
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Courses {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.LongText
  educator_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  belongsTo   Users    @relation(fields: [educator_id], references: [id])
  Exams       Exams[]
}

model Exams {
  id                  Int               @id @default(autoincrement())
  title               String
  course_id           Int
  Courses             Courses           @relation(fields: [course_id], references: [id])
  description         String?           @db.LongText
  duration_in_minutes Int
  start_time          DateTime
  end_time            DateTime
  educator_id         Int
  created_at          DateTime          @default(now())
  updated_at          DateTime          @default(now())
  belongsTo           Users             @relation(fields: [educator_id], references: [id])
  Questions           Questions[]
  ExamSubmissions     ExamSubmissions[]
  ExamResults         ExamResults[]
}

model Questions {
  id             Int              @id @default(autoincrement())
  exam_id        Int
  question_text  String           @db.LongText
  question_type  QuestionTypes
  points         Int
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  belongsTo      Exams            @relation(fields: [exam_id], references: [id])
  Choices        Choices[]
  StudentAnswers StudentAnswers[]
}

model Choices {
  id             Int              @id @default(autoincrement())
  question_id    Int
  choice_test    String           @db.MediumText
  is_correct     Boolean
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  belongsTo      Questions        @relation(fields: [question_id], references: [id])
  StudentAnswers StudentAnswers[]
}

model ExamSubmissions {
  id             Int              @id @default(autoincrement())
  student_id     Int
  exam_id        Int
  Exam           Exams            @relation(fields: [exam_id], references: [id])
  Student        Users            @relation(fields: [student_id], references: [id])
  submitted_at   DateTime
  score          Decimal          @db.Decimal(5, 2)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  StudentAnswers StudentAnswers[]
}

model StudentAnswers {
  id                 Int             @id @default(autoincrement())
  submission_id      Int
  question_id        Int
  selected_choice_id Int // for optional or multi-choice question
  answer_text        String          @db.LongText // for essay type questions
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now())
  Submission         ExamSubmissions @relation(fields: [submission_id], references: [id])
  Question           Questions       @relation(fields: [question_id], references: [id])
  Choice             Choices         @relation(fields: [selected_choice_id], references: [id])
}

model ExamResults {
  id          Int      @id @default(autoincrement())
  student_id  Int
  exam_id     Int
  total_score Decimal  @db.Decimal(5, 2)
  time_taken  Int? // time taken in minutes
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  Student     Users    @relation(fields: [student_id], references: [id])
  Exam        Exams    @relation(fields: [exam_id], references: [id])
}

model Chats {
  id               Int                @id @default(autoincrement())
  name             String
  is_group         Boolean            @default(false)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  ChatParticipants ChatParticipants[]
  ChatMessages     ChatMessages[]
}

model ChatParticipants {
  id         Int      @id @default(autoincrement())
  chat_id    Int
  user_id    Int
  is_admin   Boolean  @default(false) // for group chats
  join_at    DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Chat       Chats    @relation(fields: [chat_id], references: [id])
  User       Users    @relation(fields: [user_id], references: [id])
}

model ChatMessages {
  id                Int                 @id @default(autoincrement())
  chat_id           Int
  user_id           Int
  message_text      String              @db.LongText
  message_type      MessageTypes        @default(TEXT)
  file_url          String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  Chat              Chats               @relation(fields: [chat_id], references: [id])
  User              Users               @relation(fields: [user_id], references: [id])
  MessageReadStatus MessageReadStatus[]
}

model MessageReadStatus {
  id          Int          @id @default(autoincrement())
  message_id  Int
  user_id     Int
  read_at     DateTime
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())
  User        Users        @relation(fields: [user_id], references: [id])
  ChatMessage ChatMessages @relation(fields: [message_id], references: [id])
}

model Posts {
  id          Int         @id @default(autoincrement())
  user_id     Int
  content     String      @db.LongText
  total_likes BigInt      @default(0)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  User        Users       @relation(fields: [user_id], references: [id])
  Likes       Likes[]
  Comments    Comments[]
  PostMedia   PostMedia[]
}

model Likes {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Post       Posts    @relation(fields: [post_id], references: [id])
  User       Users    @relation(fields: [user_id], references: [id])
}

model Comments {
  id                Int      @id @default(autoincrement())
  post_id           Int
  user_id           Int
  comment_text      String   @db.LongText
  parent_comment_id Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  Post              Posts    @relation(fields: [post_id], references: [id])
  User              Users    @relation(fields: [user_id], references: [id])
}

model PostMedia {
  id         Int        @id @default(autoincrement())
  post_id    Int
  media_url  String
  media_type MediaTypes
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  Post       Posts      @relation(fields: [post_id], references: [id])
}
